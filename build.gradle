import org.gradle.api.java.archives.internal.DefaultManifest
import org.gradle.api.internal.file.IdentityFileResolver

apply plugin: 'war' 
apply plugin: 'eclipse'

repositories {
   mavenCentral()
    maven {
        url "http://download.eclipse.org/rt/eclipselink/maven.repo"
    }   
}

sourceSets.main.java.srcDirs = ["src/main/java"]

dependencies {
	compile files('json_simple-1.1.jar')
	compile files('gcm-server.jar')

	compile project(':UserServiceGenerator')
	compile project(':Natch-io')
	compile project(':Jrappy')

	compile 'log4j:log4j:1.2.7'
	compile 'org.slf4j:slf4j-log4j12:1.6.6'
	compile 'postgresql:postgresql:9.1-901-1.jdbc4'
	compile 'org.glassfish.jersey.ext:jersey-bean-validation:2.6'
	compile 'org.hibernate:hibernate-validator:5.1.0.CR1'
	compile 'org.mindrot:jbcrypt:0.3m'

    providedCompile 'org.eclipse.jetty:jetty-jsp:9.1.0.M0'
    providedCompile 'org.eclipse.jetty:jetty-webapp:9.1.0.M0'
	compile 'org.apache.commons:commons-lang3:3.1'
	compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.6'
	compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.6'
	compile 'org.eclipse.persistence:eclipselink:2.4.0'

	testCompile 'junit:junit:4.11'
	testCompile 'org.mockito:mockito-all:1.9.5'
	testCompile 'postgresql:postgresql:9.1-901-1.jdbc4'
}    

task cleanWars() << {
        ["rm", "Natch-REST-ForAutomatedTests.war"].execute()
        ["rm", "Natch-REST-Production.war"].execute()
}
clean.dependsOn = [cleanWars]

test {
	testLogging.events = ['failed','passed']
	testLogging.showStandardStreams = true
	testLogging.showCauses = true
	testLogging.showExceptions = true
	testLogging.showStackTraces = true
}

// GCM Key stuff

task lookForGcmKey () {
	def key = System.env['GCM_KEY']
	if(!key?.trim()) {
		throw new GradleException("Couldn't find gcm key.")
	}
}

task insertGCMIntoManifest() << {
	File manif = file(file(".").absolutePath+"/build/resources/main/META-INF/MANIFEST.MF")
	manif << "\nGCM_KEY: "+System.env['GCM_KEY']+"\n"
}
war.dependsOn insertGCMIntoManifest 

// DB MIGRATION

task migrate() << {
	def connStr = "postgres://denevell:user@localhost:5432/testnatch"
	migrationScript(connStr)
}

task migrateProd() << {
	def connStr = "postgres://denevell:user@denevell.org:5432/prodnatch"
	migrationScript(connStr)
}

def migrationScript(connStr) {
        def cmdstr = 'go run '+file('.')+'/db_migration.go ' + connStr
        def cmd = cmdstr.execute()
       cmd.waitFor()
       def cmdres = cmd.text
       if(cmd.exitValue()) {
               throw new GradleException("Couldn't complete migration script: " + cmd.err.text)
       } else {
               println "Migration script okay.: " + cmdres
       }
}

// Creating the WAR file

war.destinationDir = new File(".")

if(project.hasProperty('PRODUCTION')) {
        sourceSets.main.resources.srcDirs 'src/main/resources', 'src/prod/resources'
	war.dependsOn migrateProd
        war.classifier = 'Production'
} else {
	war.dependsOn migrate
        war.classifier = 'ForAutomatedTests'
}

test {  
        testLogging.events = ['failed','passed']
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
}

// When we want to start this independently

task jettyStop() << {
        println("Stopping Jetty based on its WAR name")
        ["bash", "-c", "ps -aux | grep -v grep | grep 'java.* -jar.* Natch-REST-ForAutomatedTests.war' | awk '{ print \$2}' | xargs kill -9"].execute()
        sleep(1000)
}

task jettyStart(dependsOn: [jettyStop]) << {
        println("Starting Jetty")
        ["mkdir", "logs"].execute();
        def cmd = ["bash", "-c", "java -Xdebug -Xrunjdwp:transport=dt_socket,address=8011,server=y,suspend=n -server -Xmx50m -jar jetty-runner-9.1.0.M0.jar --port 8084 Natch-REST-ForAutomatedTests.war &> logs/jetty-stdout-stderr.log"].execute()
        cmd.in.close()
        cmd.out.close()
        cmd.err.close()
        println("Waiting 7 seconds to settle")
        sleep(7000)
        println("Finished waiting")
}

