apply plugin: 'war' 
apply plugin: 'eclipse'

repositories {
   mavenCentral()
    maven {
        url "http://download.eclipse.org/rt/eclipselink/maven.repo"
    }   
}

sourceSets.main.java.srcDirs = ["src/main/java"]

compileJava {
  sourceCompatibility = 1.6
  targetCompatibility = 1.6
}

dependencies {
        compile 'org.eclipse.jetty:jetty-jsp:9.1.0.M0'
        compile 'org.eclipse.jetty:jetty-webapp:9.1.0.M0'

	testCompile 'junit:junit:4.11'
	testCompile 'org.mockito:mockito-all:1.9.5'

	compile files('json_simple-1.1.jar')
	compile files('gcm-server.jar')

	compile 'org.eclipse.persistence:eclipselink:2.4.0'
	compile 'postgresql:postgresql:9.1-901-1.jdbc4'

	compile 'org.slf4j:slf4j-simple:1.7.5'
	compile 'log4j:log4j:1.2.17'

	compile 'org.hibernate:hibernate-validator:5.1.0.CR1'

        compile 'org.apache.commons:commons-lang3:3.1'
	compile 'commons-lang:commons-lang:2.6'

	compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.6'
	compile 'org.glassfish.jersey.bundles:project:2.6'
	compile 'org.glassfish.jersey.ext:jersey-bean-validation:2.6'
	compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.6'
	compile 'javax.ws.rs:javax.ws.rs-api:2.0'
	compile 'org.codehaus.jackson:jackson-xc:1.9.12'
	compile 'org.codehaus.jackson:jackson-core-asl:1.9.12'
	compile 'org.codehaus.jackson:jackson-jaxrs:1.9.12'

	compile project(':Natch-io')

	compile 'org.mindrot:jbcrypt:0.3m'
}    

task full_jar(type: Jar, dependsOn: classes) {
	from configurations.compile.collect {it.directory ? it : zipTree(it)}
	from files(compileJava)
	baseName = "${project.archivesBaseName}-full"
	exclude('META-INF/*.RSA','META-INF/*.SF')
}
full_jar.manifest = manifest { attributes  "ISPROD": "FALSE","GCM_KEY":System.env['GCM_KEY']  }

// DB MIGRATION

task migrate() << {
	def connStr = "postgres://denevell:user@localhost:5432/testnatch"
	migrationScript(connStr)
}

task migrateProd() << {
	def connStr = "postgres://denevell:user@denevell.org:5432/prodnatch"
	migrationScript(connStr)
}

task lookForGcmKey () {
	def key = System.env['GCM_KEY']
	if(!key?.trim()) {
		throw new GradleException("Couldn't find gcm key.")
	}
}

// PROD

task createProd (type: War, dependsOn: [migrateProd]) << {} 
createProd.classifier = 'Production'
createProd.manifest = manifest { attributes  "ISPROD": "TRUE","GCM_KEY":System.env['GCM_KEY']  }

task deployProd (dependsOn: [lookForGcmKey,createProd]) << {
	undeployDeployWar(project.name+'-Production', ''+file('.')+'/build/libs/')
}

// UAT 

task createTest (type: War, dependsOn: [migrate]) << {}
createTest.classifier = 'ForAutomatedTests'
createTest.manifest = manifest { attributes  "ISPROD": "FALSE","GCM_KEY":System.env['GCM_KEY'], "main-class":"org.denevell.natch.utils.JettyApplication"  }

task deployTest (dependsOn: [lookForGcmKey,createTest]) << {
	undeployDeployWar(project.name+'-ForAutomatedTests', ''+file('.')+'/build/libs/')
}

task doTest (type: Test, dependsOn: [deployTest]) {}












// utility function

def migrationScript(connStr) {
        def cmdstr = 'go run '+file('.')+'/db_migration.go ' + connStr
        def cmd = cmdstr.execute()
	cmd.waitFor()
	def cmdres = cmd.text
	if(cmd.exitValue()) { 
		throw new GradleException("Couldn't complete migration script: " + cmd.err.text)
	} else {
		println "Migration script okay.: " + cmdres
	}	
}

def undeployDeployWar(warfile, warfilepath) {
	// Undeploy it
        def cmdstr = 'wget --http-user=tomcat --http-password=tomcat http://localhost:8080/manager/text/undeploy?&path=/'+warfile+' -O -'
        def cmd= cmdstr.execute()
	cmd.waitFor()
	def cmdres = cmd.text
	if(cmd.exitValue()) { 
		throw new GradleException("Couldn't undeploy WAR: " + cmd.err.text)
	} else {
		println "Undeploying WAR info: " + cmdres
	}	
	// Deploy it
        cmdstr = 'wget --http-user=tomcat --http-password=tomcat http://localhost:8080/manager/text/deploy?&path=/'+warfile+'&war=file:'+warfilepath+warfile+'.war -O -'
        cmd = cmdstr.execute()
	cmd.waitFor()
	cmdres = cmd.text
	if(cmd.exitValue()) { 
		throw new GradleException("Couldn't deploy WAR: " + cmd.err.text)
	} else if(!cmdres.contains("OK -")) {
		throw new GradleException("Couldn't deploy WAR: " + cmdres + cmd.err.text )
	} else {
		println "Deployed WAR: " + cmdres
	}	
}
