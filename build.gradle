apply plugin: 'war' 
apply plugin: 'eclipse'

repositories {
   mavenCentral()
    maven {
        url "http://download.eclipse.org/rt/eclipselink/maven.repo"
    }   
}

sourceSets.main.java.srcDirs = ["src/main/java"]

dependencies {
	compile files('json_simple-1.1.jar')
	compile files('gcm-server.jar')

	compile project(':Natch-io')
	compile project(':Jrappy')

	compile 'log4j:log4j:1.2.7'
	compile 'org.slf4j:slf4j-log4j12:1.6.6'
	compile 'org.mindrot:jbcrypt:0.3m'
	compile 'postgresql:postgresql:9.1-901-1.jdbc4'
	compile 'org.glassfish.jersey.ext:jersey-bean-validation:2.6'
	compile 'org.hibernate:hibernate-validator:5.1.0.CR1'

    providedCompile 'org.eclipse.jetty:jetty-jsp:9.1.0.M0'
    providedCompile 'org.eclipse.jetty:jetty-webapp:9.1.0.M0'
	providedCompile 'org.apache.commons:commons-lang3:3.1'
	providedCompile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.6'
	providedCompile 'org.glassfish.jersey.containers:jersey-container-servlet:2.6'
	providedCompile 'org.eclipse.persistence:eclipselink:2.4.0'

	testCompile 'junit:junit:4.11'
	testCompile 'org.mockito:mockito-all:1.9.5'
}    

// DB MIGRATION

task migrate() << {
	def connStr = "postgres://denevell:user@localhost:5432/testnatch"
	migrationScript(connStr)
}

task migrateProd() << {
	def connStr = "postgres://denevell:user@denevell.org:5432/prodnatch"
	migrationScript(connStr)
}

task lookForGcmKey () {
	def key = System.env['GCM_KEY']
	if(!key?.trim()) {
		throw new GradleException("Couldn't find gcm key.")
	}
}

// War for the rest project

task createTest (type: War, dependsOn: [migrate]) << {}
createTest.classifier = 'ForAutomatedTests'
createTest.destinationDir = new File(".")
createTest.manifest = manifest { attributes  "ISPROD": "FALSE","GCM_KEY":System.env['GCM_KEY'] }

task createProd (type: War, dependsOn: [migrateProd]) << {}
createProd.classifier = 'Production'
createProd.destinationDir = new File(".")
createProd.manifest = manifest { attributes  "ISPROD": "TRUE","GCM_KEY":System.env['GCM_KEY'] }

// Db stuff

def migrationScript(connStr) {
        def cmdstr = 'go run '+file('.')+'/db_migration.go ' + connStr
        def cmd = cmdstr.execute()
       cmd.waitFor()
       def cmdres = cmd.text
       if(cmd.exitValue()) {
               throw new GradleException("Couldn't complete migration script: " + cmd.err.text)
       } else {
               println "Migration script okay.: " + cmdres
       }
}
