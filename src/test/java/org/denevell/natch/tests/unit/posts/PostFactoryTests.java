package org.denevell.natch.tests.unit.posts;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.Date;

import org.denevell.natch.db.entities.PostEntity;
import org.denevell.natch.db.entities.UserEntity;
import org.denevell.natch.io.posts.AddPostResourceInput;
import org.denevell.natch.serv.posts.AddPostResourcePostEntityAdapter;
import org.junit.Before;
import org.junit.Test;

public class PostFactoryTests {
	
	private AddPostResourcePostEntityAdapter factory;

	@Before
	public void setup() {
	}
	
	@Test
	public void shouldMakePost() {
		// Arrange
		factory = new AddPostResourcePostEntityAdapter();
		long time = new Date().getTime();
		UserEntity userEntity = new UserEntity();
		
		// Act
		AddPostResourceInput input = new AddPostResourceInput("sub", "conte", "threadid");
		input.setTags(Arrays.asList("ta"));
		factory.create(input);
		PostEntity p = factory.createPost(null, userEntity); 
		
		// Assert
		assertEquals("sub", p.getSubject());
		assertEquals("conte", p.getContent());
		assertEquals(userEntity, p.getUser());
		assertEquals("threadid", p.getThreadId());
		assertTrue("Check the created time", p.getCreated() >= time && p.getCreated() <= time+3000);
		assertTrue("Check the modified time", p.getModified() >= time && p.getModified() <= time+3000);
	}
	
	@Test
	public void shouldMakePostWithAutoGeneratedThreadId() {
		// Arrange
		factory = new AddPostResourcePostEntityAdapter();
		UserEntity userEntity = new UserEntity();
		
		// Act
		AddPostResourceInput input = new AddPostResourceInput("sub", "conte"); 
		input.setThreadId(null);
		factory.create(input);
		PostEntity p = factory.createPost(null, userEntity); 
		
		// Assert
		assertNotNull(p.getThreadId());
	}
}